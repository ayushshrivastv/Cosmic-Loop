syntax = "proto3";

package bridge.v1;

message BridgeEvents {
  repeated BridgeOutEvent bridge_out_events = 1;
  repeated BridgeInEvent bridge_in_events = 2;
}

message BridgeOutEvent {
  string transaction_hash = 1;
  string block_hash = 2;
  uint64 block_number = 3;
  string block_timestamp = 4;
  string sender = 5;
  string token_address = 6;
  uint64 amount = 7;
  uint32 destination_chain_id = 8;
  string destination_address = 9;
  string bridge_provider = 10; // "layerzero", "wormhole", etc.
  uint64 fees_paid = 11;
  string fee_token = 12;
  uint64 nonce = 13;
  string status = 14; // "initiated", "completed", "failed"
  map<string, string> extra_data = 15;
}

message BridgeInEvent {
  string transaction_hash = 1;
  string block_hash = 2;
  uint64 block_number = 3;
  string block_timestamp = 4;
  string recipient = 5;
  string token_address = 6;
  uint64 amount = 7;
  uint32 source_chain_id = 8;
  string source_address = 9;
  string bridge_provider = 10;
  uint64 nonce = 11;
  string status = 12;
  string source_transaction_hash = 13;
  map<string, string> extra_data = 14;
}

message BridgeActivity {
  string id = 1; // composite key
  string activity_type = 2; // "bridge_out", "bridge_in"
  string transaction_hash = 3;
  uint64 block_number = 4;
  string block_timestamp = 5;
  string token_address = 6;
  uint64 amount = 7;
  optional string sender = 8;
  optional string recipient = 9;
  string bridge_provider = 10;
  uint32 source_chain_id = 11;
  uint32 destination_chain_id = 12;
  optional string source_address = 13;
  optional string destination_address = 14;
  string status = 15;
  optional uint64 fees_paid = 16;
  optional string fee_token = 17;
  optional uint64 nonce = 18;
  optional string source_transaction_hash = 19;
  map<string, string> extra_data = 20;
}
