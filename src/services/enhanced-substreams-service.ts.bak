/**
 * Enhanced service for interacting with The Graph Substreams for Solana data
 * This service provides advanced querying, caching, and analytics capabilities
 */

import axios from 'axios';
// Import or define necessary interfaces
import { BridgeEvent } from './substreams-service';

// Define NFTEvent interface with all required properties
export interface NFTEvent {
  id: string;
  type: 'mint' | 'transfer' | 'burn' | 'compressed';
  tokenAddress: string;
  tokenId: string;
  collection: string;
  name: string;
  from: string;
  to: string;
  amount: string;
  transactionHash: string;
  blockNumber: number;
  timestamp: string;
  metadata: {
    image: string;
    attributes: Array<{ trait_type: string; value: string }>
  };
}

// Configuration for the substreams endpoint
const SUBSTREAMS_API_URL = process.env.NEXT_PUBLIC_SUBSTREAMS_API_URL || 'https://api.thegraph.com/substreams';
const SUBSTREAMS_API_KEY = process.env.NEXT_PUBLIC_SUBSTREAMS_API_KEY || '';

// Cache TTL in milliseconds
const CACHE_TTL = 60 * 1000; // 1 minute

/**
 * Interface for token price data
 */
export interface TokenPriceData {
  tokenAddress: string;
  price: number;
  currency: string;
  timestamp: string;
  volume24h: number;
  changePercent24h: number;
}

/**
 * Interface for account balance data
 */
export interface AccountBalance {
  address: string;
  token: string;
  balance: string;
  usdValue: number;
  lastUpdated: string;
}

/**
 * Interface for transaction data
 */
export interface TransactionData {
  hash: string;
  blockNumber: number;
  timestamp: string;
  from: string;
  to: string;
  value: string;
  fee: string;
  status: 'success' | 'failed';
  type: string;
  programId?: string;
}

/**
 * Interface for marketplace events
 */
export interface MarketplaceEvent {
  id: string;
  type: 'listing' | 'sale' | 'offer' | 'cancel';
  tokenAddress: string;
  sellerAddress?: string;
  buyerAddress?: string;
  price?: string;
  currency?: string;
  timestamp: string;
  transactionHash: string;
  blockNumber: number;
}

/**
 * Enhanced service for interacting with The Graph Substreams for Solana data
 */
export class EnhancedSubstreamsService {
  private apiUrl: string;
  private apiKey: string;
  private cache: Map<string, { data: any; timestamp: number }> = new Map();
  private retryCount: number = 3;
  private retryDelay: number = 1000;

  constructor(apiUrl: string = SUBSTREAMS_API_URL, apiKey: string = SUBSTREAMS_API_KEY) {
    this.apiUrl = apiUrl;
    this.apiKey = apiKey;
  }

  /**
   * Make an API request to the Substreams endpoint with retry logic
   * @param endpoint The API endpoint
   * @param params The query parameters
   * @returns The API response
   */
  private async makeApiRequest(endpoint: string, params: any): Promise<any> {
    let attempts = 0;
    
    while (attempts < this.retryCount) {
      try {
        const response = await axios.post(`${this.apiUrl}${endpoint}`, params, {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': this.apiKey ? `Bearer ${this.apiKey}` : undefined
          }
        });
        
        return response.data;
      } catch (error: any) {
        attempts++;
        
        // If we've reached max retries, throw the error
        if (attempts >= this.retryCount) {
          console.error(`API request failed after ${this.retryCount} attempts:`, error);
          throw error;
        }
        
        // Wait before retrying
        await new Promise(resolve => setTimeout(resolve, this.retryDelay * attempts));
      }
    }
  }

  /**
   * Get data from cache or fetch from API
   * @param cacheKey The cache key
   * @param fetchFn The function to fetch data if not in cache
   * @returns The cached or fetched data
   */
  private async getFromCacheOrFetch<T>(cacheKey: string, fetchFn: () => Promise<T>): Promise<T> {
    // Check if we have valid cached data
    const cachedData = this.cache.get(cacheKey);
    if (cachedData && Date.now() - cachedData.timestamp < CACHE_TTL) {
      console.log(`Using cached data for ${cacheKey}`);
      return cachedData.data as T;
    }
    
    // Fetch fresh data
    const data = await fetchFn();
    
    // Cache the result
    this.cache.set(cacheKey, {
      data,
      timestamp: Date.now()
    });
    
    return data;
  }

  /**
   * Generate mock NFT events for development purposes
   * @param count Number of events to generate
   * @returns Array of mock NFT events
   */
  private generateMockNFTEvents(count: number = 10): NFTEvent[] {
    const events: NFTEvent[] = [];
    const eventTypes: Array<'mint' | 'transfer' | 'burn' | 'compressed'> = ['mint', 'transfer', 'burn', 'compressed'];
    const collections = ['DeGods', 'Okay Bears', 'Solana Monkey Business', 'Aurory', 'Degenerate Ape Academy'];
    
    for (let i = 0; i < count; i++) {
      const randomType = eventTypes[Math.floor(Math.random() * eventTypes.length)];
      const randomCollection = collections[Math.floor(Math.random() * collections.length)];
      const randomTimestamp = new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)).toISOString();
      
      events.push({
        id: `nft-${i}-${Date.now()}`,
        type: randomType,
        tokenAddress: `${Math.random().toString(36).substring(2, 15)}`,
        tokenId: `${i + 1}`,
        collection: randomCollection,
        name: `${randomCollection} #${Math.floor(Math.random() * 10000)}`,
        from: randomType === 'mint' ? '' : `${Math.random().toString(36).substring(2, 15)}`,
        to: randomType === 'burn' ? '' : `${Math.random().toString(36).substring(2, 15)}`,
        amount: '1',
        transactionHash: `${Math.random().toString(36).substring(2, 15)}`,
        blockNumber: Math.floor(Math.random() * 1000000) + 15000000,
        timestamp: randomTimestamp,
        metadata: {
          image: `https://picsum.photos/seed/${i}/300/300`,
          attributes: [
            { trait_type: 'Background', value: ['Blue', 'Red', 'Green', 'Yellow'][Math.floor(Math.random() * 4)] },
            { trait_type: 'Eyes', value: ['Happy', 'Sad', 'Angry', 'Sleepy'][Math.floor(Math.random() * 4)] },
            { trait_type: 'Mouth', value: ['Smile', 'Frown', 'Open', 'Closed'][Math.floor(Math.random() * 4)] }
          ]
        }
      });
    }
    
    return events;
  }

  /**
   * Generate mock marketplace events for development purposes
   * @param count Number of events to generate
   * @returns Array of mock marketplace events
   */
  private generateMockMarketplaceEvents(count: number = 10): MarketplaceEvent[] {
    const events: MarketplaceEvent[] = [];
    const eventTypes: Array<'listing' | 'sale' | 'offer' | 'cancel'> = ['listing', 'sale', 'offer', 'cancel'];
    const currencies = ['SOL', 'USDC', 'BONK'];
    
    for (let i = 0; i < count; i++) {
      const randomType = eventTypes[Math.floor(Math.random() * eventTypes.length)];
      const randomCurrency = currencies[Math.floor(Math.random() * currencies.length)];
      const randomTimestamp = new Date(Date.now() - Math.floor(Math.random() * 7 * 24 * 60 * 60 * 1000)).toISOString();
      const randomPrice = (Math.random() * 100).toFixed(4);
      
      events.push({
        id: `marketplace-${i}-${Date.now()}`,
        type: randomType,
        tokenAddress: `${Math.random().toString(36).substring(2, 15)}`,
        sellerAddress: randomType === 'offer' ? undefined : `${Math.random().toString(36).substring(2, 15)}`,
        buyerAddress: randomType === 'listing' || randomType === 'cancel' ? undefined : `${Math.random().toString(36).substring(2, 15)}`,
        price: randomType === 'cancel' ? undefined : randomPrice,
        currency: randomType === 'cancel' ? undefined : randomCurrency,
        timestamp: randomTimestamp,
        transactionHash: `${Math.random().toString(36).substring(2, 15)}`,
        blockNumber: Math.floor(Math.random() * 1000000) + 15000000
      });
    }
    
    return events;
  }

  /**
   * Generate mock account balances for development purposes
   * @param count Number of balances to generate
   * @returns Array of mock account balances
   */
  private generateMockAccountBalances(count: number = 5): AccountBalance[] {
    const balances: AccountBalance[] = [];
    const tokens = ['SOL', 'USDC', 'BONK', 'JTO', 'RAY'];
    const address = `${Math.random().toString(36).substring(2, 15)}`;
    
    for (let i = 0; i < count; i++) {
      const token = tokens[i % tokens.length];
      const balance = (Math.random() * 1000).toFixed(token === 'SOL' ? 9 : 6);
      const usdValue = parseFloat(balance) * (token === 'SOL' ? 100 : token === 'USDC' ? 1 : 0.00001);
      
      balances.push({
        address,
        token,
        balance,
        usdValue,
        lastUpdated: new Date().toISOString()
      });
    }
    
    return balances;
  }

  /**
   * Fetch recent NFT events from Substreams with advanced filtering
   * @param options Query options
   * @returns Array of NFT events
   */
  async getNFTEvents(options: {
    limit?: number;
    types?: Array<'mint' | 'transfer' | 'burn' | 'compressed'>;
    startTime?: string;
    endTime?: string;
    sortBy?: 'timestamp' | 'blockNumber';
    sortDirection?: 'asc' | 'desc';
  } = {}): Promise<NFTEvent[]> {
    const {
      limit = 10,
      types,
      startTime,
      endTime,
      sortBy = 'timestamp',
      sortDirection = 'desc'
    } = options;
    
    const cacheKey = `nft-events-${limit}-${types?.join(',') || 'all'}-${startTime || ''}-${endTime || ''}-${sortBy}-${sortDirection}`;
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock NFT events
      const events = this.generateMockNFTEvents(limit);
      
      let filteredEvents = events;
      
      // Filter by type
      if (types && types.length > 0) {
        filteredEvents = filteredEvents.filter((event: NFTEvent) => types.includes(event.type));
      }
      
      // Filter by time range
      if (startTime) {
        const startDate = new Date(startTime).getTime();
        filteredEvents = filteredEvents.filter((event: NFTEvent) => new Date(event.timestamp).getTime() >= startDate);
      }
      
      if (endTime) {
        const endDate = new Date(endTime).getTime();
        filteredEvents = filteredEvents.filter((event: NFTEvent) => new Date(event.timestamp).getTime() <= endDate);
      }
      
      // Sort events
      filteredEvents.sort((a: NFTEvent, b: NFTEvent) => {
        if (sortBy === 'timestamp') {
          const aTime = new Date(a.timestamp).getTime();
          const bTime = new Date(b.timestamp).getTime();
          return sortDirection === 'asc' ? aTime - bTime : bTime - aTime;
        } else {
          return sortDirection === 'asc' 
            ? a.blockNumber - b.blockNumber 
            : b.blockNumber - a.blockNumber;
        }
      });
      
      return filteredEvents;
    });
  }

  /**
   * Get NFT statistics including total mints, transfers, burns, unique owners, and top collections
   * @returns NFT statistics object
   */
  async getNFTStatistics(): Promise<{
    totalMints: number;
    totalTransfers: number;
    totalBurns: number;
    uniqueOwners: number;
    topCollections: Array<{ name: string; volume: number; }>;
  }> {
    const cacheKey = 'nft-statistics';
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock statistics
      const events = this.generateMockNFTEvents(100);
      
      // Calculate statistics from events
      const totalMints = events.filter(event => event.type === 'mint').length;
      const totalTransfers = events.filter(event => event.type === 'transfer').length;
      const totalBurns = events.filter(event => event.type === 'burn').length;
      
      // Calculate unique owners
      const uniqueOwners = new Set(events.map(event => event.to).filter(address => address)).size;
      
      // Calculate top collections by volume
      const collectionVolume = new Map<string, number>();
      events.forEach(event => {
        if (event.collection) {
          const currentVolume = collectionVolume.get(event.collection) || 0;
          collectionVolume.set(event.collection, currentVolume + 1);
        }
      });
      
      const topCollections = Array.from(collectionVolume.entries())
        .map(([name, volume]) => ({ name, volume }))
        .sort((a, b) => b.volume - a.volume)
        .slice(0, 5);
      
      return {
        totalMints,
        totalTransfers,
        totalBurns,
        uniqueOwners,
        topCollections
      };
    });
  }

  /**
   * Get marketplace events with filtering options
   * @param limit Maximum number of events to return
   * @returns Array of marketplace events
   */
  async getMarketplaceEvents(limit: number = 10): Promise<MarketplaceEvent[]> {
    const cacheKey = `marketplace-events-${limit}`;
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock marketplace events
      const events = this.generateMockMarketplaceEvents(limit);
      
      // Sort by timestamp (newest first)
      events.sort((a, b) => {
        const aTime = new Date(a.timestamp).getTime();
        const bTime = new Date(b.timestamp).getTime();
        return bTime - aTime;
      });
      
      return events;
    });
  }
  
  /**
   * Get account balances for a specific address
   * @param address The wallet address to get balances for
   * @returns Array of account balances
   */
  async getAccountBalances(address: string): Promise<AccountBalance[]> {
    const cacheKey = `account-balances-${address}`;
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock account balances
      return this.generateMockAccountBalances(5);
    });
  }
  
  /**
   * Get recent transactions for an account
   * @param address The wallet address to get transactions for
   * @param limit Maximum number of transactions to return
   * @returns Array of transaction data
   */
  async getAccountTransactions(address: string, limit: number = 10): Promise<TransactionData[]> {
    const cacheKey = `account-transactions-${address}-${limit}`;
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock transactions
      const transactions: TransactionData[] = [];
      const types = ['transfer', 'swap', 'stake', 'unstake', 'mint', 'burn'];
      const programIds = ['11111111111111111111111111111111', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', 'ComputeBudget111111111111111111111111111111', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'];
      
      for (let i = 0; i < limit; i++) {
        const randomType = types[Math.floor(Math.random() * types.length)];
        const randomProgramId = programIds[Math.floor(Math.random() * programIds.length)];
        const randomTimestamp = new Date(Date.now() - Math.floor(Math.random() * 7 * 24 * 60 * 60 * 1000)).toISOString();
        const randomValue = (Math.random() * 10).toFixed(9);
        const randomFee = (Math.random() * 0.001).toFixed(9);
        
        transactions.push({
          hash: `${Math.random().toString(36).substring(2, 15)}`,
          blockNumber: Math.floor(Math.random() * 1000000) + 15000000,
          timestamp: randomTimestamp,
          from: Math.random() > 0.5 ? address : `${Math.random().toString(36).substring(2, 15)}`,
          to: Math.random() > 0.5 ? address : `${Math.random().toString(36).substring(2, 15)}`,
          value: randomValue,
          fee: randomFee,
          status: Math.random() > 0.1 ? 'success' : 'failed',
          type: randomType,
          programId: randomProgramId
        });
      }
      
      // Sort by timestamp (newest first)
      transactions.sort((a, b) => {
        const aTime = new Date(a.timestamp).getTime();
        const bTime = new Date(b.timestamp).getTime();
        return bTime - aTime;
      });
      
      return transactions;
    });
  }
  
  /**
   * Get token price data for a specific token
   * @param tokenAddress The token address to get price data for
   * @returns Token price data
   */
  async getTokenPrice(tokenAddress: string): Promise<TokenPriceData> {
    const cacheKey = `token-price-${tokenAddress}`;
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock token price data
      const price = Math.random() * 100;
      const changePercent = (Math.random() * 20) - 10; // -10% to +10%
      
      return {
        tokenAddress,
        price,
        currency: 'USD',
        timestamp: new Date().toISOString(),
        volume24h: price * (Math.random() * 1000000 + 100000),
        changePercent24h: changePercent
      };
    });
  }
  
  /**
   * Get NFT statistics including total mints, transfers, burns, unique owners, and top collections
   * @returns NFT statistics object
   */
  async getNFTStatistics(): Promise<{
    totalMints: number;
    totalTransfers: number;
    totalBurns: number;
    uniqueOwners: number;
    topCollections: Array<{ name: string; volume: number; }>;
  }> {
    const cacheKey = 'nft-statistics';
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock statistics
      const events = this.generateMockNFTEvents(100);
      
      // Calculate statistics from events
      const totalMints = events.filter(event => event.type === 'mint').length;
      const totalTransfers = events.filter(event => event.type === 'transfer').length;
      const totalBurns = events.filter(event => event.type === 'burn').length;
      
      // Calculate unique owners
      const uniqueOwners = new Set(events.map(event => event.to).filter(address => address)).size;
      
      // Calculate top collections by volume
      const collectionVolume = new Map<string, number>();
      events.forEach(event => {
        if (event.collection) {
          const currentVolume = collectionVolume.get(event.collection) || 0;
          collectionVolume.set(event.collection, currentVolume + 1);
        }
      });
      
      const topCollections = Array.from(collectionVolume.entries())
        .map(([name, volume]) => ({ name, volume }))
        .sort((a, b) => b.volume - a.volume)
        .slice(0, 5);
      
      return {
        totalMints,
        totalTransfers,
        totalBurns,
        uniqueOwners,
        topCollections
      };
    });
  }
  
  /**
   * Get NFT collections with analytics data
   * @param limit Maximum number of collections to fetch
   * @returns Array of collections with analytics
   */
  async getNFTCollections(limit: number = 10): Promise<Array<{
    id: string;
    name: string;
    symbol: string;
    totalSupply: number;
    floorPrice?: number;
    volume24h?: number;
    owners: number;
    mintCount: number;
    transferCount: number;
    burnCount: number;
  }>> {
    const cacheKey = `nft-collections-${limit}`;
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock collections
      const collections = [];
      const collectionNames = ['Cosmic', 'Solana Monkeys', 'DeGods', 'Okay Bears', 'Claynosaurz'];
      const collectionSymbols = ['COSMIC', 'SMONK', 'DGOD', 'OKAY', 'CLAY'];
      
      for (let i = 0; i < Math.min(limit, collectionNames.length); i++) {
        collections.push({
          id: `collection-${i}`,
          name: collectionNames[i],
          symbol: collectionSymbols[i],
          totalSupply: 1000 + Math.floor(Math.random() * 9000),
          floorPrice: 1 + Math.random() * 10,
          volume24h: Math.random() * 1000,
          owners: 100 + Math.floor(Math.random() * 900),
          mintCount: 50 + Math.floor(Math.random() * 950),
          transferCount: 100 + Math.floor(Math.random() * 900),
          burnCount: Math.floor(Math.random() * 100)
        });
      }
      
      return collections;
    });
  }

  /**
   * Get token price data from Substreams
   * @param tokenAddresses Array of token addresses
   * @returns Token price data
   */
  async getTokenPrices(tokenAddresses: string[]): Promise<TokenPriceData[]> {
    const cacheKey = `token-prices-${tokenAddresses.join('-')}`;
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock price data
      return tokenAddresses.map(address => ({
        tokenAddress: address,
        price: 0.1 + Math.random() * 100,
        currency: 'USD',
        timestamp: new Date().toISOString(),
        volume24h: Math.random() * 1000000,
        changePercent24h: (Math.random() * 20) - 10 // -10% to +10%
      }));
    });
  }

  /**
   * Get account balances from Substreams
   * @param address Wallet address
   * @returns Account balances
   */
  async getAccountBalances(address: string): Promise<AccountBalance[]> {
    const cacheKey = `account-balances-${address}`;
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock balance data
      const tokens = ['SOL', 'USDC', 'BONK', 'RAY', 'SRM'];
      return tokens.map(token => ({
        address,
        token,
        balance: (Math.random() * 1000).toFixed(token === 'SOL' ? 9 : 2),
        usdValue: Math.random() * 1000,
        lastUpdated: new Date().toISOString()
      }));
    });
  }

  /**
   * Get recent transactions for an account
   * @param address Wallet address
   * @param limit Maximum number of transactions
   * @returns Transaction data
   */
  async getAccountTransactions(address: string, limit: number = 10): Promise<TransactionData[]> {
    const cacheKey = `account-transactions-${address}-${limit}`;
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock transaction data
      const transactions: TransactionData[] = [];
      const types = ['transfer', 'swap', 'stake', 'unstake', 'mint', 'burn'];
      const programIds = [
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', // Token program
        '11111111111111111111111111111111', // System program
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL', // Associated Token Account program
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s', // Metaplex program
        'ComputeBudget111111111111111111111111111111' // Compute budget program
      ];
      
      for (let i = 0; i < limit; i++) {
        const type = types[Math.floor(Math.random() * types.length)];
        const isOutgoing = Math.random() > 0.5;
        
        transactions.push({
          hash: `tx${Math.random().toString(36).substring(2, 10)}${Math.random().toString(36).substring(2, 10)}`,
          blockNumber: 100000000 + Math.floor(Math.random() * 1000000),
          timestamp: new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)).toISOString(),
          from: isOutgoing ? address : `${Math.random().toString(36).substring(2, 10)}${Math.random().toString(36).substring(2, 10)}`,
          to: isOutgoing ? `${Math.random().toString(36).substring(2, 10)}${Math.random().toString(36).substring(2, 10)}` : address,
          value: (Math.random() * 10).toFixed(9),
          fee: (Math.random() * 0.001).toFixed(9),
          status: Math.random() > 0.1 ? 'success' : 'failed',
          type,
          programId: programIds[Math.floor(Math.random() * programIds.length)]
        });
      }
      
      // Sort by timestamp (newest first)
      return transactions.sort((a, b) => 
        new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
      );
    });
  }
  
  /**
   * Get marketplace events from Substreams
   * @param limit Maximum number of events to fetch
   * @returns Array of marketplace events
   */
  async getMarketplaceEvents(limit: number = 10): Promise<MarketplaceEvent[]> {
    const cacheKey = `marketplace-events-${limit}`;
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock marketplace events
      return this.generateMockMarketplaceEvents(limit);
    });
  }

  /**
   * Get NFT statistics including total mints, transfers, burns, unique owners, and top collections
   * @returns NFT statistics object
   */
  async getNFTStatistics(): Promise<{
    totalMints: number;
    totalTransfers: number;
    totalBurns: number;
    uniqueOwners: number;
    topCollections: Array<{ name: string; volume: number; }>;
  }> {
    const cacheKey = 'nft-statistics';
    
    return this.getFromCacheOrFetch(cacheKey, async () => {
      // For development, generate mock statistics
      return {
        totalMints: 15000 + Math.floor(Math.random() * 5000),
        totalTransfers: 50000 + Math.floor(Math.random() * 10000),
        totalBurns: 2000 + Math.floor(Math.random() * 1000),
        uniqueOwners: 8000 + Math.floor(Math.random() * 2000),
        topCollections: [
          { name: 'Okay Bears', volume: 5000 + Math.random() * 5000 },
          { name: 'DeGods', volume: 4000 + Math.random() * 4000 },
          { name: 'Claynosaurz', volume: 3000 + Math.random() * 3000 },
          { name: 'Cosmic', volume: 2000 + Math.random() * 2000 },
          { name: 'Solana Monkeys', volume: 1000 + Math.random() * 1000 }
        ]
      };
    });
  }

  /**
   * Generate mock NFT events for development
   * @param count Number of events to generate
   * @returns Array of mock NFT events
   */
  private generateMockNFTEvents(count: number): NFTEvent[] {
    const events: NFTEvent[] = [];
    const eventTypes: Array<'mint' | 'transfer' | 'burn' | 'compressed'> = ['mint', 'transfer', 'burn', 'compressed'];
    const walletAddresses = [
      'DYw8jMTrZqRbV3VgZH9HoQ8C9y7KdjcMiUQP5MWN2GQP',
      '7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi',
      'HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH',
      '2fmz8SuNVyxEP6QwKQs6LNaT2ATszySPEJdhUDesxktc',
      '3yFwqXBfZY4aVpoLbl722DV8hPJJRjGLoEfedDgYsXJP'
    ];
    
    for (let i = 0; i < count; i++) {
      const type = eventTypes[Math.floor(Math.random() * eventTypes.length)];
      const fromAddress = type === 'mint' ? undefined : walletAddresses[Math.floor(Math.random() * walletAddresses.length)];
      const toAddress = type === 'burn' ? undefined : walletAddresses[Math.floor(Math.random() * walletAddresses.length)];
      
      events.push({
        id: `nft-event-${i}-${Date.now()}`,
        type,
        tokenAddress: `SOL${Math.random().toString(36).substring(2, 10)}${Math.random().toString(36).substring(2, 10)}`,
        fromAddress,
        toAddress,
        timestamp: new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)).toISOString(),
        transactionHash: `tx${Math.random().toString(36).substring(2, 10)}${Math.random().toString(36).substring(2, 10)}`,
        blockNumber: 100000000 + Math.floor(Math.random() * 1000000),
        metadata: Math.random() > 0.3 ? {
          name: `NFT #${Math.floor(Math.random() * 10000)}`,
          symbol: 'COSMIC',
          uri: `https://arweave.net/${Math.random().toString(36).substring(2, 10)}`,
          image: `https://arweave.net/${Math.random().toString(36).substring(2, 10)}/image.png`,
          description: 'A Solana OpenAPI NFT.',
          attributes: [
            {
              trait_type: 'Background',
              value: ['Blue', 'Red', 'Green', 'Yellow', 'Purple'][Math.floor(Math.random() * 5)]
            },
            {
              trait_type: 'Rarity',
              value: ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'][Math.floor(Math.random() * 5)]
            }
          ]
        } : undefined
      });
    }
    
    return events;
  }
}

// Export a singleton instance
export const enhancedSubstreamsService = new EnhancedSubstreamsService();
